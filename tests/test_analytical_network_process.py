import pytest
from algorithm.analytical_network_process import AnalyticalNetworkProcessor


@pytest.fixture
def macro_clusters():
    return [
        {
            "matr": [
                [1.0],
            ],
            "cluster": 0,
            "directs": [0]
        },
        {
            "matr": [
                [1.0],
            ],
            "cluster": 1,
            "directs": [1]
        },
    ]


@pytest.fixture
def micro_clusters():
    return [
        {
            "cluster": 0,
            "elements": [
                {
                    "element": 0,
                    "directs": [
                        [
                            [1.0, 2.0, 1.0 / 2.0, 2.0],
                            [1.0 / 2.0, 1.0, 1.0 / 3., 1.0 / 2.],
                            [2.0, 3.0, 1.0, 2.0],
                            [1.0 / 2., 2.0, 1.0 / 2., 1.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                        ],
                    ]
                },
                {
                    "element": 1,
                    "directs": [
                        [
                            [1.0, 1. / 2.0, 1.0 / 2.0, 1.0 / 3.],
                            [2.0, 1.0, 1.0, 1.0 / 2.],
                            [2.0, 1.0, 1.0, 1. / 2.0],
                            [3.0, 2.0, 2.0, 1.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                        ],
                    ]
                },
                {
                    "element": 3,
                    "directs": [
                        [
                            [1.0, 2.0, 1.0 / 2.0, 1.0 / 3.],
                            [1. / 2.0, 1.0, 1.0 / 2., 1.0 / 3.],
                            [2.0, 2.0, 1.0, 1. / 2.0],
                            [3.0, 3.0, 2.0, 1.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                        ],
                    ]
                },
                {
                    "element": 4,
                    "directs": [
                        [
                            [1.0, 1. / 2.0, 1.0 / 3.0, 1.0 / 2.],
                            [2.0, 1.0, 1.0 / 2., 1.0],
                            [3.0, 2.0, 1.0, 1. / 2.0],
                            [2.0, 1.0, 2.0, 1.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                        ],
                    ]
                },
            ]
        },
        {
            "cluster": 1,
            "elements": [
                {
                    "element": 0,
                    "directs": [
                        [
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [1.0, 1.0, 1.0/3., 1.0/5.],
                            [1.0, 1.0, 1.0/3., 1.0/5.],
                            [3.0, 3.0, 1.0, 1.0],
                            [5.0, 5.0, 1.0, 1.0],
                        ],
                    ]
                },
                {
                    "element": 1,
                    "directs": [
                        [
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [1.0, 1.0/2., 1.0/2., 5.0],
                            [2.0, 1.0, 1.0/2., 5.0],
                            [2.0, 1.0/2., 1.0, 3.0],
                            [1.0/5., 1.0/5., 1.0/3., 1.0],
                        ],
                    ]
                },
                {
                    "element": 3,
                    "directs": [
                        [
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                        ],
                    ]
                },
                {
                    "element": 4,
                    "directs": [
                        [
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                        ],
                        [
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                        ],
                    ]
                },
            ]
        },
    ]


@pytest.fixture
def elements():
    return {
        "names": [
            "1.1 RNNLM",
            "1.2 Word2Vec",
            "1.3 GloVe",
            "1.4 fastText",
            "2.1 Время формирования четверостишия",
            "2.2 Время обучения",
            "2.3 Количество настроечных парамтеров",
            "2.4 Качество стихотворного текста",
        ],
        "counts": [4, 4]
    }


def test_calculate(macro_clusters, micro_clusters, elements):
    processor = AnalyticalNetworkProcessor(macro_clusters, micro_clusters)
    processor.calculate(elements)
